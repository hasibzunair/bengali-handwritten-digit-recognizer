datagen = ImageDataGenerator(zoom_range = 0.1,
                            height_shift_range = 0.1,
                            width_shift_range = 0.1,
                            rotation_range = 20)

x_test0 = np.ndarray(shape=(0, 28, 28, 1), dtype="float32")
x_test1 = np.ndarray(shape=(0, 28, 28, 1), dtype="float32")
x_test2 = np.ndarray(shape=(0, 28, 28, 1), dtype="float32")
x_test3 = np.ndarray(shape=(0, 28, 28, 1), dtype="float32")


for i in tqdm(range(0,n_test)) :    
    test_case = x_test[i,:].reshape(1,28,28,1)    
    x_test0 = np.concatenate(   ( x_test0, test_case ),  axis=0  )
    j = 0
    for x_case, garbage in datagen.flow(test_case, [0], batch_size=1):
        j += 1
        if j == 1:
            x_test1 = np.concatenate(   ( x_test1, x_case ),  axis=0  )
        elif j == 2:
            x_test2 = np.concatenate(   ( x_test2, x_case ),  axis=0  )
        elif j == 3:
            x_test3 = np.concatenate(   ( x_test3, x_case ),  axis=0  )
        else:
            break




y_test0 = model.predict(x_test0, batch_size=64)
y_test1 = model.predict(x_test1, batch_size=64)
y_test2 = model.predict(x_test2, batch_size=64)
y_test3 = model.predict(x_test3, batch_size=64)
y_test = .4*y_test0 + .2*y_test1 + .2*y_test2 + .2*y_test3

y_index = np.argmax(y_test,axis=1)

